/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 1 cycles
//   Latency: 11 cycles

//   Resources required:
//     4 multipliers (16 x 16 bit)
//     52 adders (16 x 16 bit)

// Generated on Tue Aug 20 15:53:59 EDT 2019

// Latency: 11 clock cycles
// Throughput: 1 transform every 1 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 1 cycles.  This means that
// 1 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 11 cycles.  This means that
// the 'next_out' will be asserted 11 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [15:0] in [15:0];
   wire [15:0] X0;
   wire [15:0] Y0;
   wire [15:0] X1;
   wire [15:0] Y1;
   wire [15:0] X2;
   wire [15:0] Y2;
   wire [15:0] X3;
   wire [15:0] Y3;
   wire [15:0] X4;
   wire [15:0] Y4;
   wire [15:0] X5;
   wire [15:0] Y5;
   wire [15:0] X6;
   wire [15:0] Y6;
   wire [15:0] X7;
   wire [15:0] Y7;
   wire [15:0] X8;
   wire [15:0] Y8;
   wire [15:0] X9;
   wire [15:0] Y9;
   wire [15:0] X10;
   wire [15:0] Y10;
   wire [15:0] X11;
   wire [15:0] Y11;
   wire [15:0] X12;
   wire [15:0] Y12;
   wire [15:0] X13;
   wire [15:0] Y13;
   wire [15:0] X14;
   wire [15:0] Y14;
   wire [15:0] X15;
   wire [15:0] Y15;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_8data_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 8 complex data points enter the system over 1 cycles
      for (j=0; j < 0; j = j+1) begin
          // Input: 8 complex words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= j*16 + k;
         end
         @(posedge clk);
      end
      j = 0;
      for (k=0; k < 16; k = k+1) begin
         in[k] <= j*16 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 0)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 0; j = j+1) begin
         // Input 16 words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= 16 + j*16 + k;
          end
          @(posedge clk);
       end
       j = 0;
       for (k=0; k < 16; k = k+1) begin
          in[k] <= 16 + j*16 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 0; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 0; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $finish;
   end
endmodule

// Latency: 11
// Gap: 1
// module_name_is:dft_top
module dft_8data_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire [15:0] t0_8;
   wire [15:0] t0_9;
   wire [15:0] t0_10;
   wire [15:0] t0_11;
   wire [15:0] t0_12;
   wire [15:0] t0_13;
   wire [15:0] t0_14;
   wire [15:0] t0_15;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire [15:0] t1_8;
   wire [15:0] t1_9;
   wire [15:0] t1_10;
   wire [15:0] t1_11;
   wire [15:0] t1_12;
   wire [15:0] t1_13;
   wire [15:0] t1_14;
   wire [15:0] t1_15;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire [15:0] t2_8;
   wire [15:0] t2_9;
   wire [15:0] t2_10;
   wire [15:0] t2_11;
   wire [15:0] t2_12;
   wire [15:0] t2_13;
   wire [15:0] t2_14;
   wire [15:0] t2_15;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire [15:0] t3_8;
   wire [15:0] t3_9;
   wire [15:0] t3_10;
   wire [15:0] t3_11;
   wire [15:0] t3_12;
   wire [15:0] t3_13;
   wire [15:0] t3_14;
   wire [15:0] t3_15;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire [15:0] t4_8;
   wire [15:0] t4_9;
   wire [15:0] t4_10;
   wire [15:0] t4_11;
   wire [15:0] t4_12;
   wire [15:0] t4_13;
   wire [15:0] t4_14;
   wire [15:0] t4_15;
   wire next_4;
   wire [15:0] t5_0;
   wire [15:0] t5_1;
   wire [15:0] t5_2;
   wire [15:0] t5_3;
   wire [15:0] t5_4;
   wire [15:0] t5_5;
   wire [15:0] t5_6;
   wire [15:0] t5_7;
   wire [15:0] t5_8;
   wire [15:0] t5_9;
   wire [15:0] t5_10;
   wire [15:0] t5_11;
   wire [15:0] t5_12;
   wire [15:0] t5_13;
   wire [15:0] t5_14;
   wire [15:0] t5_15;
   wire next_5;
   assign t0_0 = X0;
   assign Y0 = t5_0;
   assign t0_1 = X1;
   assign Y1 = t5_1;
   assign t0_2 = X2;
   assign Y2 = t5_2;
   assign t0_3 = X3;
   assign Y3 = t5_3;
   assign t0_4 = X4;
   assign Y4 = t5_4;
   assign t0_5 = X5;
   assign Y5 = t5_5;
   assign t0_6 = X6;
   assign Y6 = t5_6;
   assign t0_7 = X7;
   assign Y7 = t5_7;
   assign t0_8 = X8;
   assign Y8 = t5_8;
   assign t0_9 = X9;
   assign Y9 = t5_9;
   assign t0_10 = X10;
   assign Y10 = t5_10;
   assign t0_11 = X11;
   assign Y11 = t5_11;
   assign t0_12 = X12;
   assign Y12 = t5_12;
   assign t0_13 = X13;
   assign Y13 = t5_13;
   assign t0_14 = X14;
   assign Y14 = t5_14;
   assign t0_15 = X15;
   assign Y15 = t5_15;
   assign next_0 = next;
   assign next_out = next_5;

// latency=1, gap=1
   codeBlock39426 stage0(.clk(clk), .reset(reset), .next_in(next_0), .next_out(next_1),
       .X0_in(t0_0), .Y0(t1_0),
       .X1_in(t0_1), .Y1(t1_1),
       .X2_in(t0_2), .Y2(t1_2),
       .X3_in(t0_3), .Y3(t1_3),
       .X4_in(t0_4), .Y4(t1_4),
       .X5_in(t0_5), .Y5(t1_5),
       .X6_in(t0_6), .Y6(t1_6),
       .X7_in(t0_7), .Y7(t1_7),
       .X8_in(t0_8), .Y8(t1_8),
       .X9_in(t0_9), .Y9(t1_9),
       .X10_in(t0_10), .Y10(t1_10),
       .X11_in(t0_11), .Y11(t1_11),
       .X12_in(t0_12), .Y12(t1_12),
       .X13_in(t0_13), .Y13(t1_13),
       .X14_in(t0_14), .Y14(t1_14),
       .X15_in(t0_15), .Y15(t1_15));


// latency=2, gap=1
   codeBlock39492 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=2, gap=1
   codeBlock39799 stage2(.clk(clk), .reset(reset), .next_in(next_2), .next_out(next_3),
       .X0_in(t2_0), .Y0(t3_0),
       .X1_in(t2_1), .Y1(t3_1),
       .X2_in(t2_2), .Y2(t3_2),
       .X3_in(t2_3), .Y3(t3_3),
       .X4_in(t2_4), .Y4(t3_4),
       .X5_in(t2_5), .Y5(t3_5),
       .X6_in(t2_6), .Y6(t3_6),
       .X7_in(t2_7), .Y7(t3_7),
       .X8_in(t2_8), .Y8(t3_8),
       .X9_in(t2_9), .Y9(t3_9),
       .X10_in(t2_10), .Y10(t3_10),
       .X11_in(t2_11), .Y11(t3_11),
       .X12_in(t2_12), .Y12(t3_12),
       .X13_in(t2_13), .Y13(t3_13),
       .X14_in(t2_14), .Y14(t3_14),
       .X15_in(t2_15), .Y15(t3_15));


// latency=5, gap=1
   codeBlock40106 stage3(.clk(clk), .reset(reset), .next_in(next_3), .next_out(next_4),
       .X0_in(t3_0), .Y0(t4_0),
       .X1_in(t3_1), .Y1(t4_1),
       .X2_in(t3_2), .Y2(t4_2),
       .X3_in(t3_3), .Y3(t4_3),
       .X4_in(t3_4), .Y4(t4_4),
       .X5_in(t3_5), .Y5(t4_5),
       .X6_in(t3_6), .Y6(t4_6),
       .X7_in(t3_7), .Y7(t4_7),
       .X8_in(t3_8), .Y8(t4_8),
       .X9_in(t3_9), .Y9(t4_9),
       .X10_in(t3_10), .Y10(t4_10),
       .X11_in(t3_11), .Y11(t4_11),
       .X12_in(t3_12), .Y12(t4_12),
       .X13_in(t3_13), .Y13(t4_13),
       .X14_in(t3_14), .Y14(t4_14),
       .X15_in(t3_15), .Y15(t4_15));


// latency=1, gap=1
   codeBlock40453 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3),
       .X4_in(t4_4), .Y4(t5_4),
       .X5_in(t4_5), .Y5(t5_5),
       .X6_in(t4_6), .Y6(t5_6),
       .X7_in(t4_7), .Y7(t5_7),
       .X8_in(t4_8), .Y8(t5_8),
       .X9_in(t4_9), .Y9(t5_9),
       .X10_in(t4_10), .Y10(t5_10),
       .X11_in(t4_11), .Y11(t5_11),
       .X12_in(t4_12), .Y12(t5_12),
       .X13_in(t4_13), .Y13(t5_13),
       .X14_in(t4_14), .Y14(t5_14),
       .X15_in(t4_15), .Y15(t5_15));


endmodule

// Latency: 1
// Gap: 1
module codeBlock39426(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   assign next_out = next;


   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign Y0 = X0;
   assign Y1 = X1;
   assign Y2 = X8;
   assign Y3 = X9;
   assign Y4 = X4;
   assign Y5 = X5;
   assign Y6 = X12;
   assign Y7 = X13;
   assign Y8 = X2;
   assign Y9 = X3;
   assign Y10 = X10;
   assign Y11 = X11;
   assign Y12 = X6;
   assign Y13 = X7;
   assign Y14 = X14;
   assign Y15 = X15;



   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock39492(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_40908(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a169;
   wire signed [15:0] a170;
   wire signed [15:0] a171;
   wire signed [15:0] a172;
   wire signed [15:0] a177;
   wire signed [15:0] a178;
   wire signed [15:0] a179;
   wire signed [15:0] a180;
   wire signed [15:0] a185;
   wire signed [15:0] a186;
   wire signed [15:0] a187;
   wire signed [15:0] a188;
   wire signed [15:0] a193;
   wire signed [15:0] a194;
   wire signed [15:0] a195;
   wire signed [15:0] a196;
   wire signed [16:0] tm4;
   wire signed [16:0] tm5;
   wire signed [16:0] tm6;
   wire signed [16:0] tm7;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm8;
   wire signed [16:0] tm9;
   wire signed [16:0] tm10;
   wire signed [16:0] tm11;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm12;
   wire signed [16:0] tm13;
   wire signed [16:0] tm14;
   wire signed [16:0] tm15;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm16;
   wire signed [16:0] tm17;
   wire signed [16:0] tm18;
   wire signed [16:0] tm19;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t337;
   wire signed [15:0] t338;
   wire signed [15:0] t339;
   wire signed [15:0] t340;
   wire signed [15:0] t341;
   wire signed [15:0] t342;
   wire signed [15:0] t343;
   wire signed [15:0] t344;
   wire signed [15:0] t345;
   wire signed [15:0] t346;
   wire signed [15:0] t347;
   wire signed [15:0] t348;
   wire signed [15:0] t349;
   wire signed [15:0] t350;
   wire signed [15:0] t351;
   wire signed [15:0] t352;


   assign a169 = X0;
   assign a170 = X2;
   assign a171 = X1;
   assign a172 = X3;
   assign a177 = X4;
   assign a178 = X6;
   assign a179 = X5;
   assign a180 = X7;
   assign a185 = X8;
   assign a186 = X10;
   assign a187 = X9;
   assign a188 = X11;
   assign a193 = X12;
   assign a194 = X14;
   assign a195 = X13;
   assign a196 = X15;
   assign Y0 = t337;
   assign Y1 = t338;
   assign Y2 = t339;
   assign Y3 = t340;
   assign Y4 = t341;
   assign Y5 = t342;
   assign Y6 = t343;
   assign Y7 = t344;
   assign Y8 = t345;
   assign Y9 = t346;
   assign Y10 = t347;
   assign Y11 = t348;
   assign Y12 = t349;
   assign Y13 = t350;
   assign Y14 = t351;
   assign Y15 = t352;
   assign t337 = tm4[16:1];
   assign t338 = tm5[16:1];
   assign t339 = tm6[16:1];
   assign t340 = tm7[16:1];
   assign t341 = tm8[16:1];
   assign t342 = tm9[16:1];
   assign t343 = tm10[16:1];
   assign t344 = tm11[16:1];
   assign t345 = tm12[16:1];
   assign t346 = tm13[16:1];
   assign t347 = tm14[16:1];
   assign t348 = tm15[16:1];
   assign t349 = tm16[16:1];
   assign t350 = tm17[16:1];
   assign t351 = tm18[16:1];
   assign t352 = tm19[16:1];

    addfxp #(17, 1) add39504(.a({{1{a169[15]}}, a169}), .b({{1{a170[15]}}, a170}), .clk(clk), .q(tm4));    // 0
    addfxp #(17, 1) add39519(.a({{1{a171[15]}}, a171}), .b({{1{a172[15]}}, a172}), .clk(clk), .q(tm5));    // 0
    subfxp #(17, 1) sub39534(.a({{1{a169[15]}}, a169}), .b({{1{a170[15]}}, a170}), .clk(clk), .q(tm6));    // 0
    subfxp #(17, 1) sub39549(.a({{1{a171[15]}}, a171}), .b({{1{a172[15]}}, a172}), .clk(clk), .q(tm7));    // 0
    addfxp #(17, 1) add39580(.a({{1{a177[15]}}, a177}), .b({{1{a178[15]}}, a178}), .clk(clk), .q(tm8));    // 0
    addfxp #(17, 1) add39595(.a({{1{a179[15]}}, a179}), .b({{1{a180[15]}}, a180}), .clk(clk), .q(tm9));    // 0
    subfxp #(17, 1) sub39610(.a({{1{a177[15]}}, a177}), .b({{1{a178[15]}}, a178}), .clk(clk), .q(tm10));    // 0
    subfxp #(17, 1) sub39625(.a({{1{a179[15]}}, a179}), .b({{1{a180[15]}}, a180}), .clk(clk), .q(tm11));    // 0
    addfxp #(17, 1) add39656(.a({{1{a185[15]}}, a185}), .b({{1{a186[15]}}, a186}), .clk(clk), .q(tm12));    // 0
    addfxp #(17, 1) add39671(.a({{1{a187[15]}}, a187}), .b({{1{a188[15]}}, a188}), .clk(clk), .q(tm13));    // 0
    subfxp #(17, 1) sub39686(.a({{1{a185[15]}}, a185}), .b({{1{a186[15]}}, a186}), .clk(clk), .q(tm14));    // 0
    subfxp #(17, 1) sub39701(.a({{1{a187[15]}}, a187}), .b({{1{a188[15]}}, a188}), .clk(clk), .q(tm15));    // 0
    addfxp #(17, 1) add39732(.a({{1{a193[15]}}, a193}), .b({{1{a194[15]}}, a194}), .clk(clk), .q(tm16));    // 0
    addfxp #(17, 1) add39747(.a({{1{a195[15]}}, a195}), .b({{1{a196[15]}}, a196}), .clk(clk), .q(tm17));    // 0
    subfxp #(17, 1) sub39762(.a({{1{a193[15]}}, a193}), .b({{1{a194[15]}}, a194}), .clk(clk), .q(tm18));    // 0
    subfxp #(17, 1) sub39777(.a({{1{a195[15]}}, a195}), .b({{1{a196[15]}}, a196}), .clk(clk), .q(tm19));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock39799(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_40911(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a105;
   wire signed [15:0] a106;
   wire signed [15:0] a107;
   wire signed [15:0] a108;
   wire signed [15:0] a113;
   wire signed [15:0] a114;
   wire signed [15:0] a115;
   wire signed [15:0] a116;
   wire signed [15:0] a121;
   wire signed [15:0] a122;
   wire signed [15:0] a123;
   wire signed [15:0] a124;
   wire signed [15:0] a129;
   wire signed [15:0] a130;
   wire signed [15:0] a131;
   wire signed [15:0] a132;
   wire signed [16:0] tm20;
   wire signed [16:0] tm21;
   wire signed [16:0] tm22;
   wire signed [16:0] tm23;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm24;
   wire signed [16:0] tm25;
   wire signed [16:0] tm26;
   wire signed [16:0] tm27;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [16:0] tm28;
   wire signed [16:0] tm29;
   wire signed [16:0] tm30;
   wire signed [16:0] tm31;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm32;
   wire signed [16:0] tm33;
   wire signed [16:0] tm34;
   wire signed [16:0] tm35;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t233;
   wire signed [15:0] t234;
   wire signed [15:0] t235;
   wire signed [15:0] t236;
   wire signed [15:0] t237;
   wire signed [15:0] t238;
   wire signed [15:0] t239;
   wire signed [15:0] t240;
   wire signed [15:0] t241;
   wire signed [15:0] t242;
   wire signed [15:0] t243;
   wire signed [15:0] t244;
   wire signed [15:0] t245;
   wire signed [15:0] t246;
   wire signed [15:0] t247;
   wire signed [15:0] t248;


   assign a105 = X0;
   assign a106 = X4;
   assign a107 = X1;
   assign a108 = X5;
   assign a113 = X2;
   assign a114 = X7;
   assign a115 = X3;
   assign a116 = X6;
   assign a121 = X8;
   assign a122 = X12;
   assign a123 = X9;
   assign a124 = X13;
   assign a129 = X10;
   assign a130 = X15;
   assign a131 = X11;
   assign a132 = X14;
   assign Y0 = t233;
   assign Y1 = t234;
   assign Y2 = t235;
   assign Y3 = t236;
   assign Y4 = t237;
   assign Y5 = t238;
   assign Y6 = t239;
   assign Y7 = t240;
   assign Y8 = t241;
   assign Y9 = t242;
   assign Y10 = t243;
   assign Y11 = t244;
   assign Y12 = t245;
   assign Y13 = t246;
   assign Y14 = t247;
   assign Y15 = t248;
   assign t233 = tm20[16:1];
   assign t234 = tm21[16:1];
   assign t235 = tm22[16:1];
   assign t236 = tm23[16:1];
   assign t237 = tm24[16:1];
   assign t238 = tm25[16:1];
   assign t239 = tm26[16:1];
   assign t240 = tm27[16:1];
   assign t241 = tm28[16:1];
   assign t242 = tm29[16:1];
   assign t243 = tm30[16:1];
   assign t244 = tm31[16:1];
   assign t245 = tm32[16:1];
   assign t246 = tm33[16:1];
   assign t247 = tm34[16:1];
   assign t248 = tm35[16:1];

    addfxp #(17, 1) add39811(.a({{1{a105[15]}}, a105}), .b({{1{a106[15]}}, a106}), .clk(clk), .q(tm20));    // 0
    addfxp #(17, 1) add39826(.a({{1{a107[15]}}, a107}), .b({{1{a108[15]}}, a108}), .clk(clk), .q(tm21));    // 0
    subfxp #(17, 1) sub39841(.a({{1{a105[15]}}, a105}), .b({{1{a106[15]}}, a106}), .clk(clk), .q(tm22));    // 0
    subfxp #(17, 1) sub39856(.a({{1{a107[15]}}, a107}), .b({{1{a108[15]}}, a108}), .clk(clk), .q(tm23));    // 0
    addfxp #(17, 1) add39887(.a({{1{a113[15]}}, a113}), .b({{1{a114[15]}}, a114}), .clk(clk), .q(tm24));    // 0
    subfxp #(17, 1) sub39902(.a({{1{a115[15]}}, a115}), .b({{1{a116[15]}}, a116}), .clk(clk), .q(tm25));    // 0
    subfxp #(17, 1) sub39917(.a({{1{a113[15]}}, a113}), .b({{1{a114[15]}}, a114}), .clk(clk), .q(tm26));    // 0
    addfxp #(17, 1) add39932(.a({{1{a115[15]}}, a115}), .b({{1{a116[15]}}, a116}), .clk(clk), .q(tm27));    // 0
    addfxp #(17, 1) add39963(.a({{1{a121[15]}}, a121}), .b({{1{a122[15]}}, a122}), .clk(clk), .q(tm28));    // 0
    addfxp #(17, 1) add39978(.a({{1{a123[15]}}, a123}), .b({{1{a124[15]}}, a124}), .clk(clk), .q(tm29));    // 0
    subfxp #(17, 1) sub39993(.a({{1{a121[15]}}, a121}), .b({{1{a122[15]}}, a122}), .clk(clk), .q(tm30));    // 0
    subfxp #(17, 1) sub40008(.a({{1{a123[15]}}, a123}), .b({{1{a124[15]}}, a124}), .clk(clk), .q(tm31));    // 0
    addfxp #(17, 1) add40039(.a({{1{a129[15]}}, a129}), .b({{1{a130[15]}}, a130}), .clk(clk), .q(tm32));    // 0
    subfxp #(17, 1) sub40054(.a({{1{a131[15]}}, a131}), .b({{1{a132[15]}}, a132}), .clk(clk), .q(tm33));    // 0
    subfxp #(17, 1) sub40069(.a({{1{a129[15]}}, a129}), .b({{1{a130[15]}}, a130}), .clk(clk), .q(tm34));    // 0
    addfxp #(17, 1) add40084(.a({{1{a131[15]}}, a131}), .b({{1{a132[15]}}, a132}), .clk(clk), .q(tm35));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 5
// Gap: 1
module codeBlock40106(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(4, 1) shiftFIFO_40914(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a45;
   wire signed [15:0] a46;
   wire signed [15:0] a47;
   wire signed [15:0] a48;
   wire signed [15:0] a53;
   wire signed [15:0] a54;
   wire signed [15:0] a55;
   wire signed [15:0] a56;
   wire signed [15:0] a59;
   wire signed [15:0] a60;
   wire signed [15:0] a61;
   wire signed [15:0] a62;
   wire signed [15:0] a67;
   wire signed [15:0] a68;
   wire signed [15:0] a69;
   wire signed [15:0] a70;
   wire signed [16:0] tm36;
   wire signed [16:0] tm37;
   wire signed [16:0] tm38;
   wire signed [16:0] tm39;
   wire signed [16:0] tm44;
   wire signed [16:0] tm45;
   wire signed [16:0] tm46;
   wire signed [16:0] tm47;
   wire signed [15:0] t109;
   wire signed [15:0] t110;
   wire signed [15:0] t111;
   wire signed [15:0] t112;
   wire signed [15:0] t119;
   wire signed [15:0] t120;
   wire signed [15:0] t121;
   wire signed [15:0] t122;
   reg signed [15:0] tm52;
   reg signed [15:0] tm55;
   reg signed [15:0] tm64;
   reg signed [15:0] tm67;
   wire signed [15:0] a41;
   wire signed [15:0] a42;
   wire signed [15:0] a43;
   wire signed [15:0] a44;
   reg signed [15:0] tm53;
   reg signed [15:0] tm56;
   reg signed [15:0] tm65;
   reg signed [15:0] tm68;
   reg signed [15:0] tm76;
   reg signed [15:0] tm79;
   reg signed [15:0] tm82;
   reg signed [15:0] tm85;
   reg signed [15:0] tm88;
   reg signed [15:0] tm91;
   reg signed [15:0] tm94;
   reg signed [15:0] tm97;
   wire signed [15:0] t113;
   wire signed [15:0] t114;
   wire signed [15:0] t123;
   wire signed [15:0] t124;
   reg signed [15:0] tm54;
   reg signed [15:0] tm57;
   reg signed [15:0] tm66;
   reg signed [15:0] tm69;
   reg signed [15:0] tm77;
   reg signed [15:0] tm80;
   reg signed [15:0] tm83;
   reg signed [15:0] tm86;
   reg signed [15:0] tm89;
   reg signed [15:0] tm92;
   reg signed [15:0] tm95;
   reg signed [15:0] tm98;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [16:0] tm40;
   wire signed [16:0] tm41;
   wire signed [16:0] tm42;
   wire signed [16:0] tm43;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [16:0] tm48;
   wire signed [16:0] tm49;
   wire signed [16:0] tm50;
   wire signed [16:0] tm51;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   wire signed [15:0] t115;
   wire signed [15:0] t116;
   wire signed [15:0] t117;
   wire signed [15:0] t118;
   wire signed [15:0] t125;
   wire signed [15:0] t126;
   wire signed [15:0] t127;
   wire signed [15:0] t128;
   reg signed [15:0] tm78;
   reg signed [15:0] tm81;
   reg signed [15:0] tm84;
   reg signed [15:0] tm87;
   reg signed [15:0] tm90;
   reg signed [15:0] tm93;
   reg signed [15:0] tm96;
   reg signed [15:0] tm99;

   wire signed [15:0] tm0;
   assign tm0 = 16'h2d41;

   assign a45 = X0;
   assign a46 = X8;
   assign a47 = X1;
   assign a48 = X9;
   assign a53 = X12;
   assign a54 = X13;
   assign a55 = X4;
   assign a56 = X5;
   assign a59 = X2;
   assign a60 = X11;
   assign a61 = X3;
   assign a62 = X10;
   assign a67 = X15;
   assign a68 = X14;
   assign a69 = X6;
   assign a70 = X7;
   assign t109 = tm36[16:1];
   assign t110 = tm37[16:1];
   assign t111 = tm38[16:1];
   assign t112 = tm39[16:1];
   assign t119 = tm44[16:1];
   assign t120 = tm45[16:1];
   assign t121 = tm46[16:1];
   assign t122 = tm47[16:1];
   assign Y0 = tm78;
   assign Y1 = tm81;
   assign Y2 = tm84;
   assign Y3 = tm87;
   assign Y4 = t115;
   assign Y5 = t116;
   assign Y6 = t117;
   assign Y7 = t118;
   assign Y8 = tm90;
   assign Y9 = tm93;
   assign Y10 = tm96;
   assign Y11 = tm99;
   assign Y12 = t125;
   assign Y13 = t126;
   assign Y14 = t127;
   assign Y15 = t128;
   assign t115 = tm40[16:1];
   assign t116 = tm41[16:1];
   assign t117 = tm42[16:1];
   assign t118 = tm43[16:1];
   assign t125 = tm48[16:1];
   assign t126 = tm49[16:1];
   assign t127 = tm50[16:1];
   assign t128 = tm51[16:1];

    addfxp #(17, 1) add40118(.a({{1{a45[15]}}, a45}), .b({{1{a46[15]}}, a46}), .clk(clk), .q(tm36));    // 0
    addfxp #(17, 1) add40133(.a({{1{a47[15]}}, a47}), .b({{1{a48[15]}}, a48}), .clk(clk), .q(tm37));    // 0
    subfxp #(17, 1) sub40148(.a({{1{a45[15]}}, a45}), .b({{1{a46[15]}}, a46}), .clk(clk), .q(tm38));    // 0
    subfxp #(17, 1) sub40163(.a({{1{a47[15]}}, a47}), .b({{1{a48[15]}}, a48}), .clk(clk), .q(tm39));    // 0
    addfxp #(17, 1) add40290(.a({{1{a59[15]}}, a59}), .b({{1{a60[15]}}, a60}), .clk(clk), .q(tm44));    // 0
    subfxp #(17, 1) sub40305(.a({{1{a61[15]}}, a61}), .b({{1{a62[15]}}, a62}), .clk(clk), .q(tm45));    // 0
    subfxp #(17, 1) sub40320(.a({{1{a59[15]}}, a59}), .b({{1{a60[15]}}, a60}), .clk(clk), .q(tm46));    // 0
    addfxp #(17, 1) add40335(.a({{1{a61[15]}}, a61}), .b({{1{a62[15]}}, a62}), .clk(clk), .q(tm47));    // 0
    multfix #(16, 2) m40190(.a(tm0), .b(a53), .clk(clk), .q_sc(a41), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40201(.a(tm0), .b(a54), .clk(clk), .q_sc(a42), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40362(.a(tm0), .b(a67), .clk(clk), .q_sc(a43), .q_unsc(), .rst(reset));
    multfix #(16, 2) m40373(.a(tm0), .b(a68), .clk(clk), .q_sc(a44), .q_unsc(), .rst(reset));
    addfxp #(16, 1) add40208(.a(a41), .b(a42), .clk(clk), .q(t113));    // 2
    subfxp #(16, 1) sub40215(.a(a42), .b(a41), .clk(clk), .q(t114));    // 2
    subfxp #(16, 1) sub40380(.a(a43), .b(a44), .clk(clk), .q(t123));    // 2
    addfxp #(16, 1) add40387(.a(a44), .b(a43), .clk(clk), .q(t124));    // 2
    addfxp #(17, 1) add40226(.a({{1{tm54[15]}}, tm54}), .b({{1{t113[15]}}, t113}), .clk(clk), .q(tm40));    // 3
    addfxp #(17, 1) add40237(.a({{1{tm57[15]}}, tm57}), .b({{1{t114[15]}}, t114}), .clk(clk), .q(tm41));    // 3
    subfxp #(17, 1) sub40248(.a({{1{tm54[15]}}, tm54}), .b({{1{t113[15]}}, t113}), .clk(clk), .q(tm42));    // 3
    subfxp #(17, 1) sub40259(.a({{1{tm57[15]}}, tm57}), .b({{1{t114[15]}}, t114}), .clk(clk), .q(tm43));    // 3
    addfxp #(17, 1) add40398(.a({{1{tm66[15]}}, tm66}), .b({{1{t123[15]}}, t123}), .clk(clk), .q(tm48));    // 3
    subfxp #(17, 1) sub40409(.a({{1{tm69[15]}}, tm69}), .b({{1{t124[15]}}, t124}), .clk(clk), .q(tm49));    // 3
    subfxp #(17, 1) sub40420(.a({{1{tm66[15]}}, tm66}), .b({{1{t123[15]}}, t123}), .clk(clk), .q(tm50));    // 3
    addfxp #(17, 1) add40431(.a({{1{tm69[15]}}, tm69}), .b({{1{t124[15]}}, t124}), .clk(clk), .q(tm51));    // 3


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm52 <= a55;
         tm55 <= a56;
         tm64 <= a69;
         tm67 <= a70;
         tm53 <= tm52;
         tm56 <= tm55;
         tm65 <= tm64;
         tm68 <= tm67;
         tm76 <= t109;
         tm79 <= t110;
         tm82 <= t111;
         tm85 <= t112;
         tm88 <= t119;
         tm91 <= t120;
         tm94 <= t121;
         tm97 <= t122;
         tm54 <= tm53;
         tm57 <= tm56;
         tm66 <= tm65;
         tm69 <= tm68;
         tm77 <= tm76;
         tm80 <= tm79;
         tm83 <= tm82;
         tm86 <= tm85;
         tm89 <= tm88;
         tm92 <= tm91;
         tm95 <= tm94;
         tm98 <= tm97;
         tm78 <= tm77;
         tm81 <= tm80;
         tm84 <= tm83;
         tm87 <= tm86;
         tm90 <= tm89;
         tm93 <= tm92;
         tm96 <= tm95;
         tm99 <= tm98;
      end
   end
endmodule

// Latency: 1
// Gap: 1
module codeBlock40453(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   assign next_out = next;


   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign Y0 = X0;
   assign Y1 = X1;
   assign Y2 = X4;
   assign Y3 = X5;
   assign Y4 = X8;
   assign Y5 = X9;
   assign Y6 = X12;
   assign Y7 = X13;
   assign Y8 = X2;
   assign Y9 = X3;
   assign Y10 = X6;
   assign Y11 = X7;
   assign Y12 = X10;
   assign Y13 = X11;
   assign Y14 = X14;
   assign Y15 = X15;



   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule


						module multfix(clk, rst, a, b, q_sc, q_unsc);
              (* use_dsp48 = "no" *)
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);
  (* use_dsp48 = "no" *)
   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);
  (* use_dsp48 = "no" *)
   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule